// generated by astra CLI __VERSION__ serve command.
//
// ignore_for_file: depend_on_referenced_packages
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: library_prefixes

import 'dart:async';
import 'dart:developer';
import 'dart:io';
import 'dart:isolate';

import 'package:astra/core.dart';
import 'package:astra/isolate.dart';
import 'package:astra/serve.dart';

import '__PACKAGE__' as _ show __TARGET__;

__CREATE__

Future<void> main(List<String> arguments) async {
  var supervisors = <IsolateSupervisor>[];

  Future<void> startAll() async {
    for (var i = 0; i < __CONCURRENCY__; i += 1) {
      var receivePort = RawReceivePort();
      var isolate = await Isolate.spawn(create, receivePort.sendPort, //
          paused: true,
          errorsAreFatal: false,
          debugName: 'isolate/${i + 1}');
      var supervisor = IsolateSupervisor(isolate, receivePort);
      supervisors.add(supervisor);
      await supervisor.resume();
    }
  }

  Future<void> stopAll() {
    Future<void> stop(IsolateSupervisor supervisor) {
      return supervisor.stop();
    }

    return Future.wait<void>(supervisors.map<Future<void>>(stop));
  }

  await startAll();

  var signals = ProcessSignal.sigint.watch();
  await signals.first;
  await startAll();
}
